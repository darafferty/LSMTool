#########################
# build-system settings #
#########################

[build-system]
requires = [
    "pybind11",
    "scikit-build-core>=0.10",
]
build-backend = "scikit_build_core.build"


####################
# project settings #
####################

[project]
name = "lsmtool"
dynamic = ["version"]
description = "The LOFAR Local Sky Model Tool"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "David Rafferty", email = "drafferty@hs.uni-hamburg.de" },
]
maintainers = [
    { name = "Marcel Loose", email = "loose@astron.nl" },
    { name = "Hannes Breytenbach", email = "hannes.breytenbach@skao.int" },
]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Natural Language :: English",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "astropy >= 3.2",
    "everybeam >= 0.6.1",
    "lofar-parameterset >= 1.1",
    "matplotlib",
    "numpy",
    "python-casacore",
    "pyvo",
    "scipy >= 0.11",
    "shapely",
    "Pillow > 11.1",
    "bdsf",
]
[project.optional-dependencies]
sofia = ["sofia2 @ git+https://gitlab.com/milhazes/SoFia-2.git@694646dc"]

[dependency-groups]
docs = [ "setuptools_scm", "sphinx>=7.1", "sphinx-rtd-theme>=0.4.3"]
tests = ["pytest", "coverage"]
dev = ["ruff", 
       "lsmtool[sofia]",
       {include-group = "docs"}, 
       {include-group = "tests"}]

[project.scripts]
lsmtool = "lsmtool.lsmtool:main"
correct_gaussian_orientation = "lsmtool.correct_gaussian_orientation:main"

[project.urls]
Documentation = "https://lsmtool.readthedocs.io/en/latest/"
Repository = "https://git.astron.nl/RD/LSMTool"


#########################
# cibuildwheel settings #
#########################

# NOTE: running cibuildwheel only makes sense when `BUILD_EXTENSIONS` in
# section `[tool.scikit-build.cmake.define]` is set to "ON" or "TRUE".

[tool.cibuildwheel]
build = "cp3{7,8,9,10,11,12}-*_x86_64"
build-verbosity = 1
test-command = "cd {package} && pytest"
test-requires = "pytest"

[tool.cibuildwheel.linux]
skip = ["*-musllinux_*"]


#########################
# scikit-build settings #
#########################

[tool.scikit-build]
cmake.version = ">=3.15"
ninja.version = ">=1.5"
build.verbose = true
logging.level = "INFO"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["lsmtool/_version.py"]

[tool.scikit-build.cmake.define]
BUILD_EXTENSIONS = "OFF"


###########################
# setuptools_scm settings #
###########################

[tool.setuptools_scm]
write_to = "lsmtool/_version.py"


###########################
# ruff settings           #
###########################
# Copied from https://git.astron.nl/templates/python-package/-/blob/9ccee1fed6796b6784e8814cc83ee4e5d34bba3d/%7B%7Bcookiecutter.project_slug%7D%7D/pyproject.toml
[tool.ruff]
exclude = [
    ".venv",
    ".git",
    ".tox",
    "dist",
    "docs",
    "*lib/python*",
    "*egg",
    "_version.py",
    "__pycache__",
    "lsmtool/_logging.py",
    "lsmtool/lsmtool.py",
    "lsmtool/operations",
    "lsmtool/operations_lib.py",
    "lsmtool/skymodel.py",
    "lsmtool/tableio.py",
    "lsmtool/_version.py",
    "tests"
]

[tool.ruff.lint]
# Expand basic rules with name and style checks roughly equivalent to flake8 + black + pylint
# Some additional functional errors such as `await` on none async or wrong return types / args.
# More info https://docs.astral.sh/ruff/rules/
select = ["N", "A", "E", "F", "B", "W", "Q", "PL", "ASYNC", "S", "G", "RET", "ARG", "I"]

# ignore: 
# PLR2004: magic-value-comparison
# N803: pep8-naming (lsmtool mostly uses pascalCase and CamelCase naming scheme)
ignore = ["PLR2004", "N803"]


###########################
# tox settings            #
###########################
# Adapted from: https://git.astron.nl/templates/python-package/-/blob/9ccee1fed6796b6784e8814cc83ee4e5d34bba3d/%7B%7Bcookiecutter.project_slug%7D%7D/pyproject.toml
[tool.tox]
# Generative environment list to test all supported Python versions
requires = ["tox>=4.21"]
env_list = ["fix", "coverage", "lint", "format", "py{8,9,10,11,12}"]

[tool.tox.env_run_base]
description = "run unit tests"
deps = [{ replace = "ref", of = ["dependency-groups", "tests"], extend = true }]
extras = ["sofia"]
package = "editable"
set_env = { LANGUAGE = "en_US", LC_ALL = "en_US.UTF-8", PYTHONWARNINGS = "default::DeprecationWarning" }
commands = [
    ["python", "--version"],
    ["python", "-m", "pytest", { replace = "posargs", default = [], extend = true }]
]

# [tool.tox.env.fix]
# description = "format the code base to adhere to our styles, and complain about what we cannot do automatically"
# skip_install = true
# deps = ["pre-commit-uv>=4.1.1"]
# commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]

[tool.tox.env.coverage]
commands = [
    ["python", "--version"],
    ["python", "-m", "pytest", "--cov-report", "term", "--cov-report", "xml", 
     "--cov-report", "html", "--cov=lsmtool", "tests/{posargs}"]
]

# Command prefixes to reuse the same virtualenv for all linting jobs.
[tool.tox.env.lint]
deps = ["ruff"]
commands = [
    ["python", "-m", "ruff", "--version"],
    ["python", "-m", "ruff", "check", 
     { replace = "posargs", default = [], extend = true }]
]

[tool.tox.env.format]
deps = ["ruff"]
commands = [
    ["python", "-m", "ruff", "format", "-v", 
     { replace = "posargs", default = [], extend = true }]
]

[tool.tox.env.docs]
deps = [{ replace = "ref", of = ["dependency-groups", "docs"], extend = true }]
extras = ["sofia"]
# unset LC_ALL / LANGUAGE from testenv, would fail sphinx otherwise
set_env = ""
changedir = "{tox_root}"
allowlist_externals = ["rm", "sphinx-build"]
commands = [
    ["rm", "-rf", "docs/build/html"],
    ["sphinx-build", "-b", "html", "docs/source", "docs/build/html"]
]

[tool.tox.env.build]
package = "wheel"
deps = ["build>=0.8.0"]
commands = [["python", "-m", "build"]]
